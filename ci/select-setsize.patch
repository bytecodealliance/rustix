From Dan Gohman <dev@sunfishcode.online>
Subject: [PATCH] Remove the `FD_SETSIZE` limitation in `select`

The `fd_set` type is limited to a fixed `FD_SETSIZE` number of file
descriptors, however Linux's `select` has no such limitation. Change
the `select` implementation to using manual bit-vector logic to better
implement the Linux semantics.

diff -ur a/linux-user/syscall.c b/linux-user/syscall.c
--- a/linux-user/syscall.c
+++ b/linux-user/syscall.c
@@ -695,8 +695,9 @@
               char **, argv, char **, envp, int, flags)
 #if defined(TARGET_NR_select) || defined(TARGET_NR__newselect) || \
     defined(TARGET_NR_pselect6) || defined(TARGET_NR_pselect6_time64)
-safe_syscall6(int, pselect6, int, nfds, fd_set *, readfds, fd_set *, writefds, \
-              fd_set *, exceptfds, struct timespec *, timeout, void *, sig)
+safe_syscall6(int, pselect6, int, nfds, unsigned long *, readfds, \
+              unsigned long *, writefds, unsigned long *, exceptfds, \
+              struct timespec *, timeout, void *, sig)
 #endif
 #if defined(TARGET_NR_ppoll) || defined(TARGET_NR_ppoll_time64)
 safe_syscall5(int, ppoll, struct pollfd *, ufds, unsigned int, nfds,
@@ -890,7 +891,7 @@
 
 #if defined(TARGET_NR_select) || defined(TARGET_NR__newselect) || \
     defined(TARGET_NR_pselect6) || defined(TARGET_NR_pselect6_time64)
-static inline abi_long copy_from_user_fdset(fd_set *fds,
+static inline abi_long copy_from_user_fdset(unsigned long *fds,
                                             abi_ulong target_fds_addr,
                                             int n)
 {
@@ -904,7 +905,8 @@
                                  1)))
         return -TARGET_EFAULT;
 
-    FD_ZERO(fds);
+    memset(fds, 0, DIV_ROUND_UP(n, sizeof(unsigned long) * 8) *
+                   sizeof(unsigned long));
     k = 0;
     for (i = 0; i < nw; i++) {
         /* grab the abi_ulong */
@@ -912,7 +914,8 @@
         for (j = 0; j < TARGET_ABI_BITS; j++) {
             /* check the bit inside the abi_ulong */
             if ((b >> j) & 1)
-                FD_SET(k, fds);
+                fds[k / (sizeof(unsigned long) * 8)] |=
+                    1ul << (k % (sizeof(unsigned long) * 8));
             k++;
         }
     }
@@ -922,7 +925,8 @@
     return 0;
 }
 
-static inline abi_ulong copy_from_user_fdset_ptr(fd_set *fds, fd_set **fds_ptr,
+static inline abi_ulong copy_from_user_fdset_ptr(unsigned long *fds,
+                                                 unsigned long **fds_ptr,
                                                  abi_ulong target_fds_addr,
                                                  int n)
 {
@@ -937,7 +941,7 @@
 }
 
 static inline abi_long copy_to_user_fdset(abi_ulong target_fds_addr,
-                                          const fd_set *fds,
+                                          const unsigned long *fds,
                                           int n)
 {
     int i, nw, j, k;
@@ -955,7 +959,10 @@
     for (i = 0; i < nw; i++) {
         v = 0;
         for (j = 0; j < TARGET_ABI_BITS; j++) {
-            v |= ((abi_ulong)(FD_ISSET(k, fds) != 0) << j);
+            bool set =
+                (fds[k / (sizeof(unsigned long) * 8)] &
+                 (1ul << (k % (sizeof(unsigned long) * 8)))) != 0;
+            v |= ((abi_ulong)set << j);
             k++;
         }
         __put_user(v, &target_fds[i]);
@@ -1324,28 +1331,40 @@
                           abi_ulong rfd_addr, abi_ulong wfd_addr,
                           abi_ulong efd_addr, abi_ulong target_tv_addr)
 {
-    fd_set rfds, wfds, efds;
-    fd_set *rfds_ptr, *wfds_ptr, *efds_ptr;
+    unsigned long *rfds, *wfds, *efds;
+    unsigned long *rfds_ptr, *wfds_ptr, *efds_ptr;
     struct timeval tv;
     struct timespec ts, *ts_ptr;
     abi_long ret;
 
-    ret = copy_from_user_fdset_ptr(&rfds, &rfds_ptr, rfd_addr, n);
+    rfds = malloc(DIV_ROUND_UP(n, sizeof(unsigned long) * 8) *
+                  sizeof(unsigned long));
+    wfds = malloc(DIV_ROUND_UP(n, sizeof(unsigned long) * 8) *
+                  sizeof(unsigned long));
+    efds = malloc(DIV_ROUND_UP(n, sizeof(unsigned long) * 8) *
+                  sizeof(unsigned long));
+
+    ret = copy_from_user_fdset_ptr(rfds, &rfds_ptr, rfd_addr, n);
     if (ret) {
+        free(rfds); free(wfds); free(efds);
         return ret;
     }
-    ret = copy_from_user_fdset_ptr(&wfds, &wfds_ptr, wfd_addr, n);
+    ret = copy_from_user_fdset_ptr(wfds, &wfds_ptr, wfd_addr, n);
     if (ret) {
+        free(rfds); free(wfds); free(efds);
         return ret;
     }
-    ret = copy_from_user_fdset_ptr(&efds, &efds_ptr, efd_addr, n);
+    ret = copy_from_user_fdset_ptr(efds, &efds_ptr, efd_addr, n);
     if (ret) {
+        free(rfds); free(wfds); free(efds);
         return ret;
     }
 
     if (target_tv_addr) {
-        if (copy_from_user_timeval(&tv, target_tv_addr))
+        if (copy_from_user_timeval(&tv, target_tv_addr)) {
+            free(rfds); free(wfds); free(efds);
             return -TARGET_EFAULT;
+        }
         ts.tv_sec = tv.tv_sec;
         ts.tv_nsec = tv.tv_usec * 1000;
         ts_ptr = &ts;
@@ -1357,22 +1376,30 @@
                                   ts_ptr, NULL));
 
     if (!is_error(ret)) {
-        if (rfd_addr && copy_to_user_fdset(rfd_addr, &rfds, n))
+        if (rfd_addr && copy_to_user_fdset(rfd_addr, rfds, n)) {
+            free(rfds); free(wfds); free(efds);
             return -TARGET_EFAULT;
-        if (wfd_addr && copy_to_user_fdset(wfd_addr, &wfds, n))
+        }
+        if (wfd_addr && copy_to_user_fdset(wfd_addr, wfds, n)) {
+            free(rfds); free(wfds); free(efds);
             return -TARGET_EFAULT;
-        if (efd_addr && copy_to_user_fdset(efd_addr, &efds, n))
+        }
+        if (efd_addr && copy_to_user_fdset(efd_addr, efds, n)) {
+            free(rfds); free(wfds); free(efds);
             return -TARGET_EFAULT;
+        }
 
         if (target_tv_addr) {
             tv.tv_sec = ts.tv_sec;
             tv.tv_usec = ts.tv_nsec / 1000;
             if (copy_to_user_timeval(target_tv_addr, &tv)) {
+                free(rfds); free(wfds); free(efds);
                 return -TARGET_EFAULT;
             }
         }
     }
 
+    free(rfds); free(wfds); free(efds);
     return ret;
 }
 
@@ -1406,8 +1455,8 @@
                             bool time64)
 {
     abi_long rfd_addr, wfd_addr, efd_addr, n, ts_addr;
-    fd_set rfds, wfds, efds;
-    fd_set *rfds_ptr, *wfds_ptr, *efds_ptr;
+    unsigned long *rfds, *wfds, *efds;
+    unsigned long *rfds_ptr, *wfds_ptr, *efds_ptr;
     struct timespec ts, *ts_ptr;
     abi_long ret;
 
@@ -1428,16 +1455,26 @@
     efd_addr = arg4;
     ts_addr = arg5;
 
-    ret = copy_from_user_fdset_ptr(&rfds, &rfds_ptr, rfd_addr, n);
+    rfds = malloc(DIV_ROUND_UP(n, sizeof(unsigned long) * 8) *
+                  sizeof(unsigned long));
+    wfds = malloc(DIV_ROUND_UP(n, sizeof(unsigned long) * 8) *
+                  sizeof(unsigned long));
+    efds = malloc(DIV_ROUND_UP(n, sizeof(unsigned long) * 8) *
+                  sizeof(unsigned long));
+
+    ret = copy_from_user_fdset_ptr(rfds, &rfds_ptr, rfd_addr, n);
     if (ret) {
+        free(rfds); free(wfds); free(efds);
         return ret;
     }
-    ret = copy_from_user_fdset_ptr(&wfds, &wfds_ptr, wfd_addr, n);
+    ret = copy_from_user_fdset_ptr(wfds, &wfds_ptr, wfd_addr, n);
     if (ret) {
+        free(rfds); free(wfds); free(efds);
         return ret;
     }
-    ret = copy_from_user_fdset_ptr(&efds, &efds_ptr, efd_addr, n);
+    ret = copy_from_user_fdset_ptr(efds, &efds_ptr, efd_addr, n);
     if (ret) {
+        free(rfds); free(wfds); free(efds);
         return ret;
     }
 
@@ -1448,10 +1485,12 @@
     if (ts_addr) {
         if (time64) {
             if (target_to_host_timespec64(&ts, ts_addr)) {
+                free(rfds); free(wfds); free(efds);
                 return -TARGET_EFAULT;
             }
         } else {
             if (target_to_host_timespec(&ts, ts_addr)) {
+                free(rfds); free(wfds); free(efds);
                 return -TARGET_EFAULT;
             }
         }
@@ -1465,6 +1504,7 @@
     if (arg6) {
         arg7 = lock_user(VERIFY_READ, arg6, sizeof(*arg7) * 2, 1);
         if (!arg7) {
+            free(rfds); free(wfds); free(efds);
             return -TARGET_EFAULT;
         }
         arg_sigset = tswapal(arg7[0]);
@@ -1474,6 +1514,7 @@
         if (arg_sigset) {
             ret = process_sigsuspend_mask(&sig.set, arg_sigset, arg_sigsize);
             if (ret != 0) {
+                free(rfds); free(wfds); free(efds);
                 return ret;
             }
             sig_ptr = &sig;
@@ -1489,25 +1530,31 @@
     }
 
     if (!is_error(ret)) {
-        if (rfd_addr && copy_to_user_fdset(rfd_addr, &rfds, n)) {
+        if (rfd_addr && copy_to_user_fdset(rfd_addr, rfds, n)) {
+            free(rfds); free(wfds); free(efds);
             return -TARGET_EFAULT;
         }
-        if (wfd_addr && copy_to_user_fdset(wfd_addr, &wfds, n)) {
+        if (wfd_addr && copy_to_user_fdset(wfd_addr, wfds, n)) {
+            free(rfds); free(wfds); free(efds);
             return -TARGET_EFAULT;
         }
-        if (efd_addr && copy_to_user_fdset(efd_addr, &efds, n)) {
+        if (efd_addr && copy_to_user_fdset(efd_addr, efds, n)) {
+            free(rfds); free(wfds); free(efds);
             return -TARGET_EFAULT;
         }
         if (time64) {
             if (ts_addr && host_to_target_timespec64(ts_addr, &ts)) {
+                free(rfds); free(wfds); free(efds);
                 return -TARGET_EFAULT;
             }
         } else {
             if (ts_addr && host_to_target_timespec(ts_addr, &ts)) {
+                free(rfds); free(wfds); free(efds);
                 return -TARGET_EFAULT;
             }
         }
     }
+    free(rfds); free(wfds); free(efds);
     return ret;
 }
 #endif
